{"name": "modules_lux_core_extension", "html": {"main": "<section id=\"page-header\" class=\"page-header-outer modules_lux_core_extension-header\">\n    <div class=\"layer\">\n        <div class=\"page-header\">\n            <div class=\"container fullpage\">\n                <div class=\"row fullpage\">\n                    <div class=\"col-sm-12 text-center\">\n                        <breadcrumbs></breadcrumbs>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n<div id=\"page-main\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"modules_lux_core_extension-main col-md-12\">\n                <div class=\"center-block\" style=\"max-width: 900px\" data-highlight data-hash-scroll>\n                    <h1>Source code for lux.core.extension</h1><div class=\"highlight\"><pre>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n\n<span class=\"sd\">Extension</span>\n<span class=\"sd\">=====================</span>\n\n<span class=\"sd\">.. autoclass:: Extension</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n<span class=\"sd\">Extension Meta</span>\n<span class=\"sd\">=====================</span>\n\n<span class=\"sd\">.. autoclass:: ExtensionMeta</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n<span class=\"sd\">Parameter</span>\n<span class=\"sd\">=====================</span>\n\n<span class=\"sd\">.. autoclass:: Parameter</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">copy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">inspect</span> <span class=\"kn\">import</span> <span class=\"n\">getfile</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.path</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.pep</span> <span class=\"kn\">import</span> <span class=\"n\">native_str</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">lux</span> <span class=\"kn\">import</span> <span class=\"n\">__version__</span>\n\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;Extension&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;Parameter&#39;</span><span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"Parameter\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Parameter\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Parameter</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Class for defining a lux :ref:`parameter &lt;parameter&gt;` within</span>\n<span class=\"sd\">    a lux :class:`.Extension`.</span>\n\n<span class=\"sd\">    Parameters are specified when creating an :class:`.Extension` in a</span>\n<span class=\"sd\">    declarative style (as class attributes of the extension). For example::</span>\n\n<span class=\"sd\">        from lux import Extension, Parameter</span>\n\n<span class=\"sd\">        class MyExtension(Extension):</span>\n<span class=\"sd\">            title = Parameter(&#39;Hello&#39;, &#39;The title to use in the home page&#39;)</span>\n\n<span class=\"sd\">    :parameter default: the default value of the parameter. This is the value</span>\n<span class=\"sd\">        used by the framework when the parameter is not found in the config</span>\n<span class=\"sd\">        file.</span>\n<span class=\"sd\">    :parameter doc: a documentation string for the parameter.</span>\n\n<span class=\"sd\">    Parameters are case insensitive.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"n\">default</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">doc</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\">: </span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">)</span>\n    <span class=\"n\">__str__</span> <span class=\"o\">=</span> <span class=\"n\">__repr__</span>\n\n</div>\n<div class=\"viewcode-block\" id=\"ExtensionMeta\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.ExtensionMeta\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ExtensionMeta</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Contains metadata for an :class:`Extension`.</span>\n\n<span class=\"sd\">    .. attribute:: config</span>\n\n<span class=\"sd\">        Dictionary of configuration :class:`.Parameter` for the extension.</span>\n\n<span class=\"sd\">    .. attribute:: script</span>\n\n<span class=\"sd\">        Set at runtime by :func:`execute`, it is the script</span>\n<span class=\"sd\">        name which runs the application.</span>\n\n<span class=\"sd\">    .. attribute:: version</span>\n\n<span class=\"sd\">        Extension version number (specified via the :class:`.Extension`</span>\n<span class=\"sd\">        ``version`` class attribute).</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">argv</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">file</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">file</span><span class=\"o\">.</span><span class=\"n\">isdir</span><span class=\"p\">():</span>\n            <span class=\"n\">appdir</span> <span class=\"o\">=</span> <span class=\"nb\">file</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">appdir</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">file</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">appdir</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">version</span> <span class=\"ow\">or</span> <span class=\"n\">__version__</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">has_module</span><span class=\"p\">:</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c\"># otherwise it is the name of the file</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">setting</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n                <span class=\"n\">setting</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">setting</span><span class=\"p\">)</span>\n                <span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                <span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setting</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_to_pypath</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">has_module</span><span class=\"p\">:</span>\n            <span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">base</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">:</span>\n                <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">has_module</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">ispymodule</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"ExtensionMeta.media_dir\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.ExtensionMeta.media_dir\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">media_dir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Directory containing media files (if available)&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">has_module</span><span class=\"p\">:</span>\n            <span class=\"nb\">dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s\">&#39;media&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"nb\">dir</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"p\">):</span>\n        <span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n        <span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">script</span>\n        <span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">argv</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">meta</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">setting</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">setting</span><span class=\"p\">)</span>\n\n</div>\n<span class=\"k\">class</span> <span class=\"nc\">ExtensionType</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Little magic to setup the extension&#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__new__</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;_config&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;version&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;abstract&#39;</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">klass</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ExtensionType</span><span class=\"p\">,</span> <span class=\"n\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__new__</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">abstract</span><span class=\"p\">:</span>\n            <span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"s\">&#39;meta&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"p\">,</span> <span class=\"n\">ExtensionMeta</span><span class=\"p\">):</span>\n                <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n                <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n                    <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n                <span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">ExtensionMeta</span><span class=\"p\">(</span><span class=\"n\">getfile</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">),</span> <span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"n\">cfg</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">ExtensionMeta</span><span class=\"p\">(</span><span class=\"n\">getfile</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">),</span> <span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n            <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">meta</span>\n        <span class=\"k\">return</span> <span class=\"n\">klass</span>\n\n\n<div class=\"viewcode-block\" id=\"Extension\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Extension\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Extension</span><span class=\"p\">(</span><span class=\"n\">ExtensionType</span><span class=\"p\">(</span><span class=\"s\">&#39;ExtBase&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,),</span> <span class=\"p\">{</span><span class=\"s\">&#39;abstract&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">})):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Base class for :ref:`lux extensions &lt;extensions&gt;`</span>\n<span class=\"sd\">    including :class:`.App`.</span>\n\n<span class=\"sd\">    .. attribute:: meta</span>\n\n<span class=\"sd\">        The :class:`ExtensionMeta` data created by the :class:`Extension`</span>\n<span class=\"sd\">        metaclass.</span>\n\n<span class=\"sd\">    .. attribute:: logger</span>\n\n<span class=\"sd\">        The logger instance for this :class:`Extension`.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<div class=\"viewcode-block\" id=\"Extension.middleware\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Extension.middleware\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">middleware</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Called by application ``app`` when creating the middleware.</span>\n\n<span class=\"sd\">        This method is invoked the first time :attr:`.App.handler` attribute</span>\n<span class=\"sd\">        is accessed. It must return a list of WSGI middleware or ``None``.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">pass</span>\n</div>\n<div class=\"viewcode-block\" id=\"Extension.response_middleware\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Extension.response_middleware\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">response_middleware</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Called by application ``app`` when creating the response</span>\n<span class=\"sd\">        middleware&#39;&#39;&#39;</span>\n        <span class=\"k\">pass</span>\n</div>\n<div class=\"viewcode-block\" id=\"Extension.setup_logger\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Extension.setup_logger\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">setup_logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Called by :meth:`setup` method to setup the :attr:`logger`.&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s\">&#39;lux.</span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"Extension.setup\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Extension.setup\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Internal method which prepare the extension for usage.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">setting</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">params</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">)</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_logger</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n</div>\n<div class=\"viewcode-block\" id=\"Extension.extra_form_data\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Extension.extra_form_data\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">extra_form_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Must return an iterable over key-value pair of data to add to a</span>\n<span class=\"sd\">        :class:`.Form`.</span>\n\n<span class=\"sd\">        By default it returns an empty tuple.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"p\">()</span>\n</div>\n<div class=\"viewcode-block\" id=\"Extension.write\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Extension.write\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Write ``msg`` into ``stream`` or ``sys.stdout``</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">stream</span> <span class=\"ow\">or</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span>\n        <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"p\">:</span>\n            <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">native_str</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n        <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"Extension.write_err\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.extension.Extension.write_err\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write_err</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Write ``msg`` into ``stream`` or ``sys.stderr``</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">stream</span> <span class=\"ow\">or</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span>\n        <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"p\">:</span>\n            <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">native_str</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n        <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"p\">)</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">__repr__</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__repr__</span><span class=\"p\">()</span>\n\n</div>\n<span class=\"k\">class</span> <span class=\"nc\">EventHandler</span><span class=\"p\">:</span>\n    <span class=\"n\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">&#39;extension&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;name&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">extension</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"n\">extension</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\">.</span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extension</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"n\">__str__</span> <span class=\"o\">=</span> <span class=\"n\">__repr__</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extension</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class='small hidden-print text-muted' id='page-footer'>\n    <div class='container'>\n        <div class='row'>\n            <div class='block col-sm-5'>\n                <div class='hidden-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n                <div class='text-center visible-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n            </div>\n            <div class='block col-sm-2 text-center'>\n                <div class='hidden-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n                <div class='visible-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n            </div>\n            <div class='block col-sm-5'>\n                <div class='text-right hidden-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n                <div class='text-center visible-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"}, "html_url": "http://quantmind.github.io/lux/docs/modules/lux/core/extension", "slug": "modules/lux/core/extension", "site": {"url": "http://quantmind.github.io/lux", "template": "doc.html", "date": "2014-10-14T09-01-57", "python_version": "3.4.1", "name": "Lux", "template_engine": null, "media": "/media", "lux_version": "0.1.0-alpha.1", "year": 2014}, "modified": "2014-10-14T09:02:02", "content_type": "text/html", "head": {}, "api_url": "http://quantmind.github.io/lux/jsonapi/docs/modules/lux/core/extension"}