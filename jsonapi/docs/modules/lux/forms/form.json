{"html": {"main": "<section id=\"page-header\" class=\"page-header-outer modules_lux_forms_form-header\">\n    <div class=\"layer\">\n        <div class=\"page-header\">\n            <div class=\"container fullpage\">\n                <div class=\"row fullpage\">\n                    <div class=\"col-sm-12 text-center\">\n                        <breadcrumbs></breadcrumbs>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n<div id=\"page-main\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"modules_lux_forms_form-main col-md-12\">\n                <div class=\"center-block\" style=\"max-width: 900px\" data-highlight data-hash-scroll>\n                    <h1>Source code for lux.forms.form</h1><div class=\"highlight\"><pre>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">.. autoclass:: Form</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Mapping</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar</span> <span class=\"kn\">import</span> <span class=\"n\">multi_async</span><span class=\"p\">,</span> <span class=\"n\">HttpRedirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.pep</span> <span class=\"kn\">import</span> <span class=\"n\">iteritems</span><span class=\"p\">,</span> <span class=\"n\">to_string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.structures</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.html</span> <span class=\"kn\">import</span> <span class=\"n\">nicename</span><span class=\"p\">,</span> <span class=\"n\">UnicodeMixin</span><span class=\"p\">,</span> <span class=\"n\">NOTHING</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">lux</span> <span class=\"kn\">import</span> <span class=\"n\">Html</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lux.utils</span> <span class=\"kn\">import</span> <span class=\"n\">JSON_CONTENT_TYPES</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.formsets</span> <span class=\"kn\">import</span> <span class=\"n\">FormSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.fields</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">ValidationError</span><span class=\"p\">,</span> <span class=\"n\">FormError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.layouts</span> <span class=\"kn\">import</span> <span class=\"n\">Layout</span><span class=\"p\">,</span> <span class=\"n\">FORMKEY</span>\n\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;FormType&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;Form&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;BoundField&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;FieldList&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;MakeForm&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;smart_redirect&#39;</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">smart_redirect</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"c\"># Ajax request, treat it differently</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span> <span class=\"ow\">or</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">full_path</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">is_xhr</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">response</span>\n        <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">content_types</span><span class=\"o\">.</span><span class=\"n\">best_match</span><span class=\"p\">(</span><span class=\"n\">JSON_CONTENT_TYPES</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ct</span> <span class=\"ow\">in</span> <span class=\"n\">JSON_CONTENT_TYPES</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"n\">ct</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s\">&#39;redirect&#39;</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">})</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">HttpRedirect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FieldList</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A list of :class:`Field` and :class:`FieldList`.</span>\n<span class=\"sd\"> It can be used to specify fields using a declarative list in a</span>\n<span class=\"sd\"> :class:`Form` class.</span>\n<span class=\"sd\"> For example::</span>\n\n<span class=\"sd\">     from djpcms import forms</span>\n\n<span class=\"sd\">     class MyForm(forms.Form):</span>\n<span class=\"sd\">         some_fields = forms.FieldList((&#39;name&#39;,forms.CharField()),</span>\n<span class=\"sd\">                                       (&#39;description&#39;,forms.CharField()))</span>\n\n<span class=\"sd\">.. attribute:: withprefix</span>\n\n<span class=\"sd\">    if ``True`` the :class:`Fieldlist` attribute name in the form is</span>\n<span class=\"sd\">    prefixed to the field names.</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">withprefix</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">withprefix</span> <span class=\"o\">=</span> <span class=\"n\">withprefix</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">FieldList</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"ow\">or</span> <span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">nf</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">nf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">nf</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"n\">nf</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nf</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">name2</span><span class=\"p\">,</span> <span class=\"n\">field2</span> <span class=\"ow\">in</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">name2</span><span class=\"p\">,</span> <span class=\"n\">field2</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">prefix</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">withprefix</span><span class=\"p\">:</span>\n                    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"si\">%s%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n                    <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"n\">initial</span><span class=\"p\">)</span>\n                <span class=\"k\">yield</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_form_meta_data</span><span class=\"p\">(</span><span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">,</span> <span class=\"n\">with_base_fields</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">inlines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">):</span>\n            <span class=\"c\"># field name priority is the name in the instance</span>\n            <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">name</span>\n            <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)))</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">FieldList</span><span class=\"p\">):</span>\n            <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">+</span><span class=\"s\">&#39;__&#39;</span><span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">FormSet</span><span class=\"p\">):</span>\n            <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n            <span class=\"n\">inlines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">creation_counter</span><span class=\"p\">)</span>\n    <span class=\"n\">inlines</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">inlines</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">creation_counter</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># If this class is subclassing another Form, add that Form&#39;s fields.</span>\n    <span class=\"c\"># Note that we loop over the bases in *reverse*. This is necessary in</span>\n    <span class=\"c\"># order to preserve the correct order of fields.</span>\n    <span class=\"k\">if</span> <span class=\"n\">with_base_fields</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"n\">bases</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"s\">&#39;base_fields&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">base_fields</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">fields</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"n\">bases</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"s\">&#39;declared_fields&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">declared_fields</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">fields</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">),</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span><span class=\"n\">inlines</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FormType</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Metaclass that converts Field attributes to a dictionary called</span>\n<span class=\"sd\">    &#39;base_fields&#39;, taking into account parent class &#39;base_fields&#39; as well.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__new__</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">):</span>\n        <span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;layout&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">inlines</span> <span class=\"o\">=</span> <span class=\"n\">get_form_meta_data</span><span class=\"p\">(</span><span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">)</span>\n        <span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s\">&#39;base_fields&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fields</span>\n        <span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s\">&#39;base_inlines&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">inlines</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">,</span> <span class=\"n\">Layout</span><span class=\"p\">):</span>\n            <span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">Layout</span><span class=\"p\">()</span>\n        <span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s\">&#39;layout&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">layout</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">FormType</span><span class=\"p\">,</span> <span class=\"n\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__new__</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Form\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Form</span><span class=\"p\">(</span><span class=\"n\">FormType</span><span class=\"p\">(</span><span class=\"s\">&#39;BaseForm&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">UnicodeMixin</span><span class=\"p\">,),</span> <span class=\"p\">{})):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Base class for forms.</span>\n\n<span class=\"sd\">    It can be used for browser based applications as well as remote procedure</span>\n<span class=\"sd\">    calls validation.</span>\n<span class=\"sd\">    If :attr:`data` is not ``None``, this :class:`Form` bind itself to the</span>\n<span class=\"sd\">    data, otherwise it remains unbounded.</span>\n\n<span class=\"sd\">    :parameter data: dictionary type object containing data to validate.</span>\n<span class=\"sd\">        It sets the :attr:`rawdata` attribute.</span>\n<span class=\"sd\">    :parameter files: dictionary type object containing files to upload.</span>\n<span class=\"sd\">    :parameter initial: set the :attr:`initial` attribute.</span>\n<span class=\"sd\">    :parameter prefix: set the :attr:`prefix` attribute.</span>\n<span class=\"sd\">    :parameter manager: An optional manager for a database model.</span>\n<span class=\"sd\">    :parameter instance: An optional instance of a model class.</span>\n<span class=\"sd\">    :parameter request: Optional client request.</span>\n\n<span class=\"sd\">    .. attribute:: is_bound</span>\n\n<span class=\"sd\">        If ``True`` the :class:`Form` has :attr:`rawdata` which can be</span>\n<span class=\"sd\">        validated.</span>\n\n<span class=\"sd\">    .. attribute:: initial</span>\n\n<span class=\"sd\">        Dictionary of initial values for fields. The values in</span>\n<span class=\"sd\">        :attr:`initial` are only used when :attr:`is_bound` is ``False``.</span>\n\n<span class=\"sd\">    .. attribute:: rawdata</span>\n\n<span class=\"sd\">        The input data, if available this :class:`Form` is bound and can</span>\n<span class=\"sd\">        be validated via the :meth:`is_valid` method.</span>\n\n<span class=\"sd\">    .. attribute:: prefix</span>\n\n<span class=\"sd\">        String to use as prefix for field names.</span>\n\n<span class=\"sd\">        Default: ``&#39;&#39;``.</span>\n\n<span class=\"sd\">    .. attribute:: request</span>\n\n<span class=\"sd\">        An instance of a Http request class stored for convenience.</span>\n<span class=\"sd\">        The Form itself does not use it, however user&#39;s implementations</span>\n<span class=\"sd\">        may want to access it.</span>\n<span class=\"sd\">        In custom validation functions for example. Default ``None``.</span>\n\n<span class=\"sd\">    .. attribute:: forms</span>\n\n<span class=\"sd\">        A list of :class:`Form` classes. If available, the forms are used to</span>\n<span class=\"sd\">        create sub-forms which are included in the current form.</span>\n\n<span class=\"sd\">        Default: ``[]``.</span>\n\n<span class=\"sd\">    .. attribute:: form_sets</span>\n\n<span class=\"sd\">        A disctionary of :class:`FormSet` instances. If available,</span>\n<span class=\"sd\">        form-sets are used to create a given number of sub-forms which are</span>\n<span class=\"sd\">        included in the current form.</span>\n\n<span class=\"sd\">        Default: ``{}``.</span>\n\n<span class=\"sd\">    .. attribute:: instance</span>\n\n<span class=\"sd\">        An optional instance of a model.</span>\n\n<span class=\"sd\">        Default: ``None``.</span>\n\n<span class=\"sd\">    .. attribute:: layout</span>\n\n<span class=\"sd\">        The :ref:`Html layout &lt;form-layout&gt;` for this :class:`Form`. It is</span>\n<span class=\"sd\">        a descriptor_ for rendering a :class:`Form` instance into HTML::</span>\n\n<span class=\"sd\">            form = MyForm(...)</span>\n<span class=\"sd\">            html = form.layout(method=&#39;post&#39;, action=&#39;.&#39;)</span>\n\n<span class=\"sd\">    .. _descriptor: http://users.rcn.com/python/download/Descriptor.htm</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n                 <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">manager</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span> <span class=\"o\">=</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"ow\">or</span> <span class=\"n\">files</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rawdata</span> <span class=\"o\">=</span> <span class=\"n\">data</span> <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_files</span> <span class=\"o\">=</span> <span class=\"n\">files</span> <span class=\"k\">if</span> <span class=\"n\">files</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cleaned_data</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">initial</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">initial</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">prefix</span> <span class=\"ow\">or</span> <span class=\"s\">&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">instance</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">changed</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">manager</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form_sets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">fset</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_inlines</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form_sets</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">forms</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_initial</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">:</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">fire</span><span class=\"p\">(</span><span class=\"s\">&#39;on_form&#39;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">model</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">manager</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">&#39;_loop&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Form.is_valid\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.is_valid\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Asynchronous check if this :class:`Form` is valid.</span>\n\n<span class=\"sd\">        Includes any subforms. It returns a coroutine.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_unwind</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unwind</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">fset</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form_sets</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">fset</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n                        <span class=\"k\">break</span>\n        <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span> <span class=\"k\">else</span> <span class=\"bp\">False</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Form.data\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.data\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Un-cleaned data extracted from :attr:`rowdata`.&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_unwind</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Form.cleaned_data\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.cleaned_data\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">cleaned_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Form cleaned data, the data after the validation</span>\n<span class=\"sd\">        algorithm has been run. If the form was</span>\n<span class=\"sd\">        not yet validated, this property will kick off the process and return</span>\n<span class=\"sd\">        cleaned.&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_unwind</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cleaned_data</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Form.errors\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.errors\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">errors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Dictionary of errors, if any, after validation.</span>\n\n<span class=\"sd\">        If the form was not yet validated, this property will kick off the</span>\n<span class=\"sd\">        process and returns errors if they occur.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_unwind</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Form.fields\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.fields\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;List of :class:`BoundField` instances after</span>\n<span class=\"sd\">validation, if the form is bound, otherwise a list of :class:`BoundField`</span>\n<span class=\"sd\">instances with initial values.&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_unwind</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fields</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Form.dfields\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.dfields\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">dfields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Dictionary of :class:`BoundField` instances after validation.&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_unwind</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fields_dict</span>\n</div>\n<div class=\"viewcode-block\" id=\"Form.add_input\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.add_input\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_input</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s\">&#39;hidden&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Add an input to the additional :attr:`inputs` to the form.&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Html</span><span class=\"p\">(</span><span class=\"s\">&#39;input&#39;</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">))</span>\n</div>\n<div class=\"viewcode-block\" id=\"Form.value_from_instance\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.value_from_instance\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">value_from_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Extracting an attribute value from an ``instance``.</span>\n\n<span class=\"sd\">        This function is called when :attr:`Form.is_bound` is ``False``</span>\n<span class=\"sd\">        and an :attr:`instance` of a model is available.</span>\n\n<span class=\"sd\">        :parameter instance: model instance</span>\n<span class=\"sd\">        :parameter name: form field name</span>\n<span class=\"sd\">        :parameter value: current value from the :attr:`initial` dictionary.</span>\n\n<span class=\"sd\">        Override if you need to customise behavoiur.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s\">&#39;__call__&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">additional_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n<div class=\"viewcode-block\" id=\"Form.clean\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.clean\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;The form clean method.</span>\n\n<span class=\"sd\">        Called last in the validation algorithm.</span>\n<span class=\"sd\">        By default it does nothing but it can be overwritten to cross checking</span>\n<span class=\"sd\">        fields for example. It doesn&#39;t need to return anything, just throw a</span>\n<span class=\"sd\">        :class:`lux.ValidationError` in case the cleaning is not successful.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">pass</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">http_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span>\n        <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">response</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"ow\">in</span> <span class=\"n\">JSON_CONTENT_TYPES</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tojson</span><span class=\"p\">()</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">redirect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">smart_redirect</span><span class=\"p\">(</span><span class=\"n\">request</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Form.add_message\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.add_message\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Add a message to the form&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_form_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"n\">FORMKEY</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"Form.add_error_message\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.add_error_message\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_error_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Add an error message to the form&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_form_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">FORMKEY</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">save_as_new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">commit</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n            <span class=\"k\">for</span> <span class=\"n\">fset</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form_sets</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                <span class=\"n\">fset</span><span class=\"o\">.</span><span class=\"n\">set_save_as_new</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">commit</span><span class=\"o\">=</span><span class=\"n\">commit</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Form.submit\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.submit\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">submit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Submit the form once the validation has been successful. Must</span>\n<span class=\"sd\">be implemented by subclasses. By default it does nothing.&#39;&#39;&#39;</span>\n</div>\n<div class=\"viewcode-block\" id=\"Form.tojson\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.tojson\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">tojson</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Return a json-serialisable dictionary of messages for form fields.</span>\n<span class=\"sd\">        The field included are the one available in the :attr:`errors` and</span>\n<span class=\"sd\">        :attr:`messages` dictionary.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;success&#39;</span><span class=\"p\">:</span> <span class=\"ow\">not</span> <span class=\"n\">errors</span><span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dfields</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">field</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">for_name</span>\n            <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s\">&#39;message&#39;</span><span class=\"p\">:</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"s\">&#39;error&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">msg</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dfields</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">field</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">for_name</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n            <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(({</span><span class=\"s\">&#39;message&#39;</span><span class=\"p\">:</span> <span class=\"n\">m</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">msg</span><span class=\"p\">))</span>\n            <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s\">&#39;messages&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"k\">return</span> <span class=\"n\">message</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">get_widget_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bound_field</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@classmethod</span>\n<div class=\"viewcode-block\" id=\"Form.initials\"><a class=\"viewcode-back\" href=\"../../../api/forms#lux.forms.form.Form.initials\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">initials</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Iterator over initial field values.</span>\n\n<span class=\"sd\">        Check the :attr:`Field.initial` attribute for more information.</span>\n<span class=\"sd\">        This class method can be useful when using forms outside web</span>\n<span class=\"sd\">        applications.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"o\">.</span><span class=\"n\">base_fields</span><span class=\"p\">):</span>\n            <span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">get_initial</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">initial</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">yield</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">initial</span>\n\n    <span class=\"c\"># INTERNALS</span></div>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_unwind</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">raise_error</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s\">&#39;_data&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">raise_error</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">FormError</span><span class=\"p\">(</span><span class=\"s\">&#39;Call is_valid() first to access data&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">False</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_unwind</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">is_bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_bound</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cleaned_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">rawdata</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rawdata</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clean_fields</span><span class=\"p\">(</span><span class=\"n\">rawdata</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_bound</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">:</span>\n                <span class=\"c\"># Invoke the form clean method.</span>\n                <span class=\"c\"># Useful for cross fields checking</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">()</span>\n                <span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_form_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">,</span> <span class=\"n\">FORMKEY</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cleaned_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_clean_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rawdata</span><span class=\"p\">):</span>\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loop</span>\n        <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_files</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fields</span> <span class=\"o\">=</span> <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fields_dict</span> <span class=\"o\">=</span> <span class=\"n\">dfields</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial</span>\n        <span class=\"n\">is_bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span>\n        <span class=\"c\"># Loop over form fields</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_fields</span><span class=\"p\">):</span>\n            <span class=\"n\">bfield</span> <span class=\"o\">=</span> <span class=\"n\">BoundField</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prefix</span><span class=\"p\">)</span>\n            <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">bfield</span><span class=\"o\">.</span><span class=\"n\">html_name</span>\n            <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bfield</span><span class=\"p\">)</span>\n            <span class=\"n\">dfields</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bfield</span>\n            <span class=\"n\">field_value</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">is_bound</span><span class=\"p\">:</span>\n                <span class=\"n\">field_value</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">value_from_datadict</span><span class=\"p\">(</span><span class=\"n\">rawdata</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n                <span class=\"n\">bfield</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">field_value</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">field_value</span> <span class=\"o\">!=</span> <span class=\"n\">initial</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">changed</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n                    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">field_value</span>\n            <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">initial</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">field_value</span> <span class=\"o\">=</span> <span class=\"n\">initial</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n                <span class=\"n\">bfield</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">field_value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_fill_initial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c\"># Fill the initial dictionary with data from fields and from</span>\n        <span class=\"c\"># the instance if available</span>\n        <span class=\"n\">old_initial</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span>\n        <span class=\"n\">instance_id</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"k\">if</span> <span class=\"n\">instance</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_fields</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">old_initial</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">old_initial</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">get_initial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"c\"># Instance with id can override the initial value</span>\n            <span class=\"k\">if</span> <span class=\"n\">instance_id</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"c\"># First try the field method</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">value_from_instance</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value_from_instance</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">initial</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_form_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">container</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">container</span><span class=\"p\">:</span>\n                <span class=\"n\">container</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">container</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">]</span>\n\n</div>\n<span class=\"k\">class</span> <span class=\"nc\">BoundField</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A bound filed contains a :class:`Form` instance,</span>\n<span class=\"sd\">    a :class:`Field` instance which belongs to the form,</span>\n<span class=\"sd\">    and field bound data.</span>\n<span class=\"sd\">    Instances of :class:`BoundField` are created during form validation</span>\n<span class=\"sd\">    and shouldn&#39;t be used otherwise.</span>\n\n<span class=\"sd\">    .. attribute:: form</span>\n\n<span class=\"sd\">        An instance of :class:`Form`</span>\n\n<span class=\"sd\">    .. attribute::    field</span>\n\n<span class=\"sd\">        An instance of :class:`Field`</span>\n\n<span class=\"sd\">    .. attribute::    request</span>\n\n<span class=\"sd\">        An instance of :class:`djpcms.core.Request`</span>\n\n<span class=\"sd\">    .. attribute::    name</span>\n\n<span class=\"sd\">        The :attr:`field` name (the key in the forms&#39;s fields dictionary).</span>\n\n<span class=\"sd\">    .. attribute::    html_name</span>\n\n<span class=\"sd\">        The :attr:`field` name to be used in HTML.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">auto_id</span> <span class=\"o\">=</span> <span class=\"s\">&#39;id_{0[for_name]}&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">form</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">field</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">request</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">for_name</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"si\">%s%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">html_name</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">html_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">for_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">nicename</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">label</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">required</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help_text</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">help_text</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_id</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__dict__</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">+</span> <span class=\"s\">&#39;-errors&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;{0}: {1}&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s\">&#39;&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Return a cleaned value for ``value`` by running the validation</span>\n<span class=\"sd\">        algorithm on :attr:`field`.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"ow\">and</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">NOTHING</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s\">&#39;required&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"n\">func_name</span> <span class=\"o\">=</span> <span class=\"s\">&#39;clean_&#39;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"p\">)(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">_cleaned_data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n            <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">_form_message</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">widget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;The :class:`djpcms.html.Widget` instance for the field</span>\n<span class=\"sd\">with bound data and attributes. This is obtained from the :class:`Field.widget`</span>\n<span class=\"sd\">factory.&#39;&#39;&#39;</span>\n        <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">get_widget_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">fdata</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get_widget_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">attr</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">widget_attrs</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"s\">&#39;__call__&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">attr</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">attr</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">fdata</span><span class=\"p\">:</span>\n            <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">fdata</span><span class=\"p\">)</span>\n        <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">({</span><span class=\"s\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n                     <span class=\"s\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">html_name</span><span class=\"p\">,</span>\n                     <span class=\"s\">&#39;title&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help_text</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">})</span>\n        <span class=\"k\">if</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">required</span><span class=\"p\">:</span>\n            <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"s\">&#39;required&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">set_form_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">widget</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Returns the data for this BoundField,</span>\n<span class=\"sd\">or None if it wasn&#39;t given.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">value_from_datadict</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">html_name</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">property</span><span class=\"p\">(</span><span class=\"n\">_data</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">MakeForm</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Create a form class from a list of fields&#39;&#39;&#39;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">):</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">fields</span><span class=\"p\">)</span>\n    <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">FormType</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Form</span><span class=\"p\">,),</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n</pre></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class='small hidden-print text-muted' id='page-footer'>\n    <div class='container'>\n        <div class='row'>\n            <div class='block col-sm-5'>\n                <div class='hidden-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n                <div class='text-center visible-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n            </div>\n            <div class='block col-sm-2 text-center'>\n                <div class='hidden-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n                <div class='visible-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n            </div>\n            <div class='block col-sm-5'>\n                <div class='text-right hidden-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n                <div class='text-center visible-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"}, "head": {}, "site": {"url": "http://quantmind.github.io/lux", "lux_version": "0.1.1-alpha.1", "python_version": "3.4.1", "template_engine": null, "date": "2014-10-15T22-44-36", "year": 2014, "media": "/media", "name": "Lux", "template": "doc.html"}, "api_url": "http://quantmind.github.io/lux/jsonapi/docs/modules/lux/forms/form", "html_url": "http://quantmind.github.io/lux/docs/modules/lux/forms/form", "content_type": "text/html", "slug": "modules/lux/forms/form", "modified": "2014-10-15T22:44:41", "name": "modules_lux_forms_form"}