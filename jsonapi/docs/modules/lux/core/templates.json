{"slug": "modules/lux/core/templates", "site": {"lux_version": "0.1.0-alpha.1", "name": "Lux", "template_engine": null, "year": 2014, "date": "2014-10-14T08-04-53", "url": "http://quantmind.github.io/lux", "python_version": "3.4.1", "media": "/media", "template": "doc.html"}, "content_type": "text/html", "head": {}, "html_url": "http://quantmind.github.io/lux/docs/modules/lux/core/templates", "modified": "2014-10-14T08:04:58", "html": {"main": "<section id=\"page-header\" class=\"page-header-outer modules_lux_core_templates-header\">\n    <div class=\"layer\">\n        <div class=\"page-header\">\n            <div class=\"container fullpage\">\n                <div class=\"row fullpage\">\n                    <div class=\"col-sm-12 text-center\">\n                        <breadcrumbs></breadcrumbs>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n<div id=\"page-main\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"modules_lux_core_templates-main col-md-12\">\n                <div class=\"center-block\" style=\"max-width: 900px\" data-highlight data-hash-scroll>\n                    <h1>Source code for lux.core.templates</h1><div class=\"highlight\"><pre>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">The :class:`.Template` defines a family of classes which can be used to</span>\n<span class=\"sd\">build HTML elements in a pythonic fashion. No template specific language is</span>\n<span class=\"sd\">required, instead a template for an html element is created by adding children</span>\n<span class=\"sd\">:class:`.Template` to a parent one.</span>\n\n\n<span class=\"sd\">Template</span>\n<span class=\"sd\">~~~~~~~~~~~~~~~~~~~~</span>\n\n<span class=\"sd\">.. autoclass:: Template</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n\n<span class=\"sd\">Context</span>\n<span class=\"sd\">~~~~~~~~~~~~~~~~~~~~</span>\n\n<span class=\"sd\">.. autoclass:: Context</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n\n<span class=\"sd\">Page Template</span>\n<span class=\"sd\">~~~~~~~~~~~~~~~~~~~~</span>\n\n<span class=\"sd\">.. autoclass:: PageTemplate</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n\n<span class=\"sd\">Grid Template</span>\n<span class=\"sd\">~~~~~~~~~~~~~~~~~~~~</span>\n\n<span class=\"sd\">.. autoclass:: GridTemplate</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n\n<span class=\"sd\">Row Template</span>\n<span class=\"sd\">~~~~~~~~~~~~~~~~~~~~</span>\n\n<span class=\"sd\">.. autoclass:: RowTemplate</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n<span class=\"sd\">Column Template</span>\n<span class=\"sd\">~~~~~~~~~~~~~~~~~~~~</span>\n\n<span class=\"sd\">.. autoclass:: ColumnTemplate</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar</span> <span class=\"kn\">import</span> <span class=\"n\">coroutine_return</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.structures</span> <span class=\"kn\">import</span> <span class=\"n\">AttributeDictionary</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.wrappers</span> <span class=\"kn\">import</span> <span class=\"n\">Html</span>\n\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;Template&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;Context&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ColumnTemplate&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;RowTemplate&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;GridTemplate&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;PageTemplate&#39;</span><span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"Template\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Template</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A factory of :class:`.Html` objects.</span>\n\n<span class=\"sd\">    ::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; simple = Template(Context(&#39;foo&#39;, tag=&#39;span&#39;), tag=&#39;div&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; html = simple(cn=&#39;test&#39;, context={&#39;foo&#39;: &#39;bla&#39;})</span>\n<span class=\"sd\">        &gt;&gt;&gt; html.render()</span>\n<span class=\"sd\">        &lt;div class=&#39;test&#39;&gt;&lt;span data-context=&#39;foo&#39;&gt;bla&lt;/span&gt;&lt;/div&gt;</span>\n\n<span class=\"sd\">    .. attribute:: tag</span>\n\n<span class=\"sd\">        An optional HTML tag_ for the outer element of this template.</span>\n<span class=\"sd\">        If not specified, this template is a container of other templates</span>\n<span class=\"sd\">        and no outer element is rendered.</span>\n\n<span class=\"sd\">    .. attribute:: key</span>\n\n<span class=\"sd\">        An optional string which identify this :class:`Template` within</span>\n<span class=\"sd\">        other templates. It is also used for extracting content from the</span>\n<span class=\"sd\">        ``context`` dictionary passed to the template callable method.</span>\n\n<span class=\"sd\">    .. attribute:: children</span>\n\n<span class=\"sd\">        List of :class:`Template` objects which are rendered as children</span>\n<span class=\"sd\">        of this :class:`Template`</span>\n\n<span class=\"sd\">    .. attribute:: parameters</span>\n\n<span class=\"sd\">        An attribute dictionary containing all key-valued parameters passed</span>\n<span class=\"sd\">        during initialisation. These parameters are used when building an</span>\n<span class=\"sd\">        :class:`.Html` element via the callable method.</span>\n\n<span class=\"sd\">        it is initialised by the :meth:`init_parameters` method at the end</span>\n<span class=\"sd\">        of initialisation.</span>\n\n<span class=\"sd\">    .. _tag: http://www.w3schools.com/tags/</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s\">&#39;key&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">parameters</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;key&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child_template</span><span class=\"p\">()]</span>\n        <span class=\"n\">new_children</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child_template</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">child</span><span class=\"p\">:</span>\n                <span class=\"n\">new_children</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"n\">new_children</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">init_parameters</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\">(</span><span class=\"si\">%s</span><span class=\"s\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"o\">.</span><span class=\"n\">__name__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span> <span class=\"ow\">or</span> <span class=\"s\">&#39;&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__repr__</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">child_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">child</span>\n\n<div class=\"viewcode-block\" id=\"Template.init_parameters\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template.init_parameters\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">init_parameters</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Called at the and of initialisation.</span>\n\n<span class=\"sd\">        It fills the :attr:`parameters` attribute.</span>\n<span class=\"sd\">        It can be overwritten to customise behaviour.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">tag</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"n\">classes</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">AttributeDictionary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defaults</span> <span class=\"ow\">or</span> <span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">children</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Create an Html element from this template.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">context</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parameters</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n            <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">Html</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">classes</span><span class=\"p\">,</span> <span class=\"s\">&#39;__call__&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"n\">classes</span><span class=\"p\">()</span>\n        <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">addClass</span><span class=\"p\">(</span><span class=\"n\">classes</span><span class=\"p\">)</span>\n        <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">maker</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"c\">#</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_process_child</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_process_child</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n                <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"c\">#</span>\n        <span class=\"k\">if</span> <span class=\"n\">context</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">:</span>\n            <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">))</span>\n        <span class=\"c\">#</span>\n        <span class=\"k\">return</span> <span class=\"n\">html</span>\n\n<div class=\"viewcode-block\" id=\"Template.keys\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template.keys\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">keys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Generator of keys in this :class:`.Template`</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">:</span>\n                <span class=\"k\">yield</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">key</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"k\">yield</span> <span class=\"n\">key</span>\n</div>\n<div class=\"viewcode-block\" id=\"Template.get\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Retrieve a children :class:`Template` with :attr:`Template.key`</span>\n<span class=\"sd\">        equal to ``key``.</span>\n\n<span class=\"sd\">        The search is done recursively and the first match is</span>\n<span class=\"sd\">        returned. If not available return ``None``.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">child</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"n\">elem</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">elem</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">elem</span>\n</div>\n<div class=\"viewcode-block\" id=\"Template.post_process_child\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template.post_process_child\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">post_process_child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Called just before adding ``child`` to ``html``</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"n\">child</span>\n\n</div></div>\n<div class=\"viewcode-block\" id=\"Context\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Context\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Context</span><span class=\"p\">(</span><span class=\"n\">Template</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A :class:`Template` which enforces the :attr:`~.Template.key`</span>\n<span class=\"sd\">    attribute.</span>\n\n<span class=\"sd\">    Fore example::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from lux import Context</span>\n<span class=\"sd\">        &gt;&gt;&gt; template = Context(&#39;foo&#39;, tag=&#39;div&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; template.key</span>\n<span class=\"sd\">        &#39;foo&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; html = template(context={&#39;foo&#39;: &#39;pippo&#39;})</span>\n<span class=\"sd\">        &gt;&gt;&gt; html.render()</span>\n<span class=\"sd\">        &lt;div&gt;pippo&lt;/div&gt;</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s\">&#39;key&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n</div>\n<div class=\"viewcode-block\" id=\"ColumnTemplate\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.ColumnTemplate\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ColumnTemplate</span><span class=\"p\">(</span><span class=\"n\">Template</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A template to place inside a :class:`.RowTemplate`.</span>\n\n<span class=\"sd\">    :param span=1: fraction indicating how much this template extend across</span>\n<span class=\"sd\">        its row container. For example ``0.5`` is half span. Must be between</span>\n<span class=\"sd\">        0 and 1.</span>\n\n<span class=\"sd\">    :param device=&#39;md&#39;: The device which render the column with the correct</span>\n<span class=\"sd\">        ``span``. Valid options are</span>\n\n<span class=\"sd\">        * ``xs`` extra small (phones)</span>\n<span class=\"sd\">        * ``sm`` small (tablets)</span>\n<span class=\"sd\">        * ``md`` medium (desktops)</span>\n<span class=\"sd\">        * ``lg`` large (desktops)</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"s\">&#39;div&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">span</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;span&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;device&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;md&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ColumnTemplate</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">span</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s\">&#39;Column span &quot;</span><span class=\"si\">%s</span><span class=\"s\">&quot; greater than one!&#39;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">span</span><span class=\"p\">)</span>\n\n</div>\n<div class=\"viewcode-block\" id=\"RowTemplate\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.RowTemplate\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">RowTemplate</span><span class=\"p\">(</span><span class=\"n\">Template</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A :class:`.RowTemplate` is a container of :class:`.ColumnTemplate`</span>\n<span class=\"sd\">    elements. It should be placed inside a :class:`.GridTemplate` for</span>\n<span class=\"sd\">    better rendering.</span>\n\n<span class=\"sd\">    :param column: Optional parameter which set the :attr:`column` attribute.</span>\n\n<span class=\"sd\">    .. attribute:: column</span>\n\n<span class=\"sd\">        It can be either 12 or 24 and it indicates the number of column</span>\n<span class=\"sd\">        spans available.</span>\n\n<span class=\"sd\">        Default: 12</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">grid_child</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"s\">&#39;div&#39;</span>\n    <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"s\">&#39;row&#39;</span>\n    <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;columns&#39;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n        <span class=\"c\"># self.classes = &#39;grid%s row&#39; % self.columns</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">RowTemplate</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">child_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">ColumnTemplate</span><span class=\"p\">):</span>\n            <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">ColumnTemplate</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"n\">span</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">span</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n        <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"s\">&#39;col-</span><span class=\"si\">%s</span><span class=\"s\">-</span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">,</span> <span class=\"n\">span</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">child</span>\n\n</div>\n<div class=\"viewcode-block\" id=\"GridTemplate\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.GridTemplate\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">GridTemplate</span><span class=\"p\">(</span><span class=\"n\">Template</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A container of :class:`.RowTemplate` or other templates.</span>\n\n<span class=\"sd\">    :parameter fixed: optional boolean flag to indicate if the grid is</span>\n<span class=\"sd\">        fixed (html class ``grid fixed``) or fluid (html class ``grid fluid``).</span>\n<span class=\"sd\">        If not specified the grid is considered fluid (it changes width when</span>\n<span class=\"sd\">        the browser window changes width).</span>\n\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"s\">&#39;div&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fixed</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;fixed&#39;</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"s\">&#39;container&#39;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fixed</span> <span class=\"k\">else</span> <span class=\"s\">&#39;container-fluid&#39;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">child_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"s\">&#39;grid_child&#39;</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">):</span>\n            <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">RowTemplate</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">child</span>\n\n</div>\n<div class=\"viewcode-block\" id=\"PageTemplate\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.PageTemplate\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PageTemplate</span><span class=\"p\">(</span><span class=\"n\">Template</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A :class:`.Template` to render the inner part of the HTML ``body`` tag.</span>\n\n<span class=\"sd\">    A page template is created by including the page components during</span>\n<span class=\"sd\">    initialisation, for example::</span>\n\n<span class=\"sd\">        from lux.extensions.cms.grid import PageTemplate</span>\n\n<span class=\"sd\">        head_body_foot = PageTemplate(</span>\n<span class=\"sd\">            Template(...),</span>\n<span class=\"sd\">            GridTemplate(...),</span>\n<span class=\"sd\">            ...)</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"s\">&#39;div&#39;</span>\n    <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"s\">&#39;cms-page&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s\">&#39;role&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">&#39;page&#39;</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PageTemplate</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">html</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PageTemplate</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">children</span><span class=\"p\">,</span>\n                                              <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">:</span>\n            <span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;content_ids&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">ids</span><span class=\"p\">:</span>\n                <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n                    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">ids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">content</span> <span class=\"ow\">in</span> <span class=\"n\">contents</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">elem</span> <span class=\"ow\">in</span> <span class=\"n\">ids</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"p\">()):</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply_content</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">html</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"n\">coroutine_return</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">apply_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">elem</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n        <span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">({</span><span class=\"s\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"s\">&#39;content_type&#39;</span><span class=\"p\">:</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">content_type</span><span class=\"p\">})</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">chain</span><span class=\"p\">(((</span><span class=\"s\">&#39;title&#39;</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">),</span>\n                                  <span class=\"p\">(</span><span class=\"s\">&#39;keywords&#39;</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">)),</span>\n                                 <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Html</span><span class=\"p\">(</span><span class=\"s\">&#39;div&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span></div>\n</pre></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class='small hidden-print text-muted' id='page-footer'>\n    <div class='container'>\n        <div class='row'>\n            <div class='block col-sm-5'>\n                <div class='hidden-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n                <div class='text-center visible-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n            </div>\n            <div class='block col-sm-2 text-center'>\n                <div class='hidden-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n                <div class='visible-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n            </div>\n            <div class='block col-sm-5'>\n                <div class='text-right hidden-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n                <div class='text-center visible-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"}, "api_url": "http://quantmind.github.io/lux/jsonapi/docs/modules/lux/core/templates", "name": "modules_lux_core_templates"}