{"content_type": "text/html", "name": "modules_lux_core_templates", "api_url": "http://quantmind.github.io/lux/jsonapi/docs/modules/lux/core/templates", "site": {"name": "Lux", "year": 2014, "template": "doc.html", "template_engine": null, "url": "http://quantmind.github.io/lux", "date": "2014-10-15T08-53-07", "lux_version": "0.1.1-alpha.1", "media": "/media", "python_version": "3.4.1"}, "slug": "modules/lux/core/templates", "head": {}, "html_url": "http://quantmind.github.io/lux/docs/modules/lux/core/templates", "modified": "2014-10-15T08:53:12", "html": {"main": "<section id=\"page-header\" class=\"page-header-outer modules_lux_core_templates-header\">\n    <div class=\"layer\">\n        <div class=\"page-header\">\n            <div class=\"container fullpage\">\n                <div class=\"row fullpage\">\n                    <div class=\"col-sm-12 text-center\">\n                        <breadcrumbs></breadcrumbs>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n<div id=\"page-main\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"modules_lux_core_templates-main col-md-12\">\n                <div class=\"center-block\" style=\"max-width: 900px\" data-highlight data-hash-scroll>\n                    <h1>Source code for lux.core.templates</h1><div class=\"highlight\"><pre>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">.. autoclass:: Template</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar</span> <span class=\"kn\">import</span> <span class=\"n\">coroutine_return</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.structures</span> <span class=\"kn\">import</span> <span class=\"n\">AttributeDictionary</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.wrappers</span> <span class=\"kn\">import</span> <span class=\"n\">Html</span>\n\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;Template&#39;</span><span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"Template\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Template</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A factory of :class:`.Html` objects.</span>\n\n<span class=\"sd\">    The :class:`.Template` defines a family of classes which can be used to</span>\n<span class=\"sd\">    build HTML elements in a pythonic fashion.</span>\n<span class=\"sd\">    No template specific language is</span>\n<span class=\"sd\">    required, instead a template for an html element is created</span>\n<span class=\"sd\">    by adding children :class:`.Template` to a parent one.::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; simple = Template(Context(&#39;foo&#39;, tag=&#39;span&#39;), tag=&#39;div&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; html = simple(cn=&#39;test&#39;, context={&#39;foo&#39;: &#39;bla&#39;})</span>\n<span class=\"sd\">        &gt;&gt;&gt; html.render()</span>\n<span class=\"sd\">        &lt;div class=&#39;test&#39;&gt;&lt;span data-context=&#39;foo&#39;&gt;bla&lt;/span&gt;&lt;/div&gt;</span>\n\n<span class=\"sd\">    .. attribute:: tag</span>\n\n<span class=\"sd\">        An optional HTML tag_ for the outer element of this template.</span>\n<span class=\"sd\">        If not specified, this template is a container of other templates</span>\n<span class=\"sd\">        and no outer element is rendered.</span>\n\n<span class=\"sd\">    .. attribute:: key</span>\n\n<span class=\"sd\">        An optional string which identify this :class:`Template` within</span>\n<span class=\"sd\">        other templates. It is also used for extracting content from the</span>\n<span class=\"sd\">        ``context`` dictionary passed to the template callable method.</span>\n\n<span class=\"sd\">    .. attribute:: children</span>\n\n<span class=\"sd\">        List of :class:`Template` objects which are rendered as children</span>\n<span class=\"sd\">        of this :class:`Template`</span>\n\n<span class=\"sd\">    .. attribute:: parameters</span>\n\n<span class=\"sd\">        An attribute dictionary containing all key-valued parameters passed</span>\n<span class=\"sd\">        during initialisation. These parameters are used when building an</span>\n<span class=\"sd\">        :class:`.Html` element via the callable method.</span>\n\n<span class=\"sd\">        it is initialised by the :meth:`init_parameters` method at the end</span>\n<span class=\"sd\">        of initialisation.</span>\n\n<span class=\"sd\">    .. _tag: http://www.w3schools.com/tags/</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">children</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s\">&#39;key&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">parameters</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;key&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child_template</span><span class=\"p\">()]</span>\n        <span class=\"n\">new_children</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child_template</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">child</span><span class=\"p\">:</span>\n                <span class=\"n\">new_children</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"n\">new_children</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">init_parameters</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\">(</span><span class=\"si\">%s</span><span class=\"s\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"o\">.</span><span class=\"n\">__name__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span> <span class=\"ow\">or</span> <span class=\"s\">&#39;&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__repr__</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">child_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">child</span>\n\n<div class=\"viewcode-block\" id=\"Template.init_parameters\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template.init_parameters\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">init_parameters</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Called at the and of initialisation.</span>\n\n<span class=\"sd\">        It fills the :attr:`parameters` attribute.</span>\n<span class=\"sd\">        It can be overwritten to customise behaviour.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">tag</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"n\">classes</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">AttributeDictionary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defaults</span> <span class=\"ow\">or</span> <span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">children</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Create an Html element from this template.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">context</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parameters</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n            <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">Html</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">classes</span><span class=\"p\">,</span> <span class=\"s\">&#39;__call__&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"n\">classes</span><span class=\"p\">()</span>\n        <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">addClass</span><span class=\"p\">(</span><span class=\"n\">classes</span><span class=\"p\">)</span>\n        <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">maker</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"c\">#</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_process_child</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_process_child</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n                <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"c\">#</span>\n        <span class=\"k\">if</span> <span class=\"n\">context</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">:</span>\n            <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">))</span>\n        <span class=\"c\">#</span>\n        <span class=\"k\">return</span> <span class=\"n\">html</span>\n\n<div class=\"viewcode-block\" id=\"Template.keys\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template.keys\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">keys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Generator of keys in this :class:`.Template`</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">:</span>\n                <span class=\"k\">yield</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">key</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"k\">yield</span> <span class=\"n\">key</span>\n</div>\n<div class=\"viewcode-block\" id=\"Template.get\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Retrieve a children :class:`Template` with :attr:`Template.key`</span>\n<span class=\"sd\">        equal to ``key``.</span>\n\n<span class=\"sd\">        The search is done recursively and the first match is</span>\n<span class=\"sd\">        returned. If not available return ``None``.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">child</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n            <span class=\"n\">elem</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">elem</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">elem</span>\n</div>\n<div class=\"viewcode-block\" id=\"Template.post_process_child\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.templates.Template.post_process_child\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">post_process_child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Called just before adding ``child`` to ``html``</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"n\">child</span></div></div>\n</pre></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class='small hidden-print text-muted' id='page-footer'>\n    <div class='container'>\n        <div class='row'>\n            <div class='block col-sm-5'>\n                <div class='hidden-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n                <div class='text-center visible-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n            </div>\n            <div class='block col-sm-2 text-center'>\n                <div class='hidden-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n                <div class='visible-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n            </div>\n            <div class='block col-sm-5'>\n                <div class='text-right hidden-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n                <div class='text-center visible-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"}}