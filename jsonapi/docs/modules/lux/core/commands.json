{"name": "modules_lux_core_commands", "html": {"main": "<section id=\"page-header\" class=\"page-header-outer modules_lux_core_commands-header\">\n    <div class=\"layer\">\n        <div class=\"page-header\">\n            <div class=\"container fullpage\">\n                <div class=\"row fullpage\">\n                    <div class=\"col-sm-12 text-center\">\n                        <breadcrumbs></breadcrumbs>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n<div id=\"page-main\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"modules_lux_core_commands-main col-md-12\">\n                <div class=\"center-block\" style=\"max-width: 900px\" data-highlight data-hash-scroll>\n                    <h1>Source code for lux.core.commands</h1><div class=\"highlight\"><pre>\n<span class=\"sd\">&#39;&#39;&#39;The :mod:`lux.core` module contains all the functionalities to run a</span>\n<span class=\"sd\">web site or an rpc server using lux and pulsar_.</span>\n\n\n<span class=\"sd\">ConsoleParser</span>\n<span class=\"sd\">=====================</span>\n\n<span class=\"sd\">.. autoclass:: ConsoleParser</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n\n<span class=\"sd\">Command</span>\n<span class=\"sd\">==================</span>\n\n<span class=\"sd\">.. autoclass:: Command</span>\n<span class=\"sd\">   :members:</span>\n<span class=\"sd\">   :member-order: bysource</span>\n\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Setting</span><span class=\"p\">,</span> <span class=\"n\">get_event_loop</span><span class=\"p\">,</span> <span class=\"n\">Application</span><span class=\"p\">,</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">,</span>\n                    <span class=\"n\">asyncio</span><span class=\"p\">,</span> <span class=\"n\">maybe_async</span><span class=\"p\">,</span> <span class=\"n\">Future</span><span class=\"p\">,</span> <span class=\"n\">Config</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.pep</span> <span class=\"kn\">import</span> <span class=\"n\">native_str</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.config</span> <span class=\"kn\">import</span> <span class=\"n\">Loglevel</span><span class=\"p\">,</span> <span class=\"n\">Debug</span><span class=\"p\">,</span> <span class=\"n\">LogHandlers</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">lux</span> <span class=\"kn\">import</span> <span class=\"n\">__version__</span>\n\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;ConsoleParser&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;CommandError&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;Command&#39;</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommandError</span><span class=\"p\">(</span><span class=\"n\">ImproperlyConfigured</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<div class=\"viewcode-block\" id=\"ConsoleParser\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.commands.ConsoleParser\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ConsoleParser</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A class for parsing the console inputs.</span>\n\n<span class=\"sd\">    Used as base class for both :class:`.Command` and :class:`.App`</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">option_list</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n    <span class=\"n\">default_option_list</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Loglevel</span><span class=\"p\">(),</span>\n                           <span class=\"n\">LogHandlers</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">&#39;console_level_message&#39;</span><span class=\"p\">]),</span>\n                           <span class=\"n\">Debug</span><span class=\"p\">())</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_module</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_parser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s\">&#39;--version&#39;</span><span class=\"p\">,</span>\n                            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s\">&#39;version&#39;</span><span class=\"p\">,</span>\n                            <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">(),</span>\n                            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s\">&quot;Show version number and exit&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Setting</span><span class=\"p\">(</span><span class=\"s\">&#39;config&#39;</span><span class=\"p\">,</span>\n                         <span class=\"p\">(</span><span class=\"s\">&#39;-c&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;--config&#39;</span><span class=\"p\">),</span>\n                         <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_module</span><span class=\"p\">,</span>\n                         <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s\">&#39;python dotted path to a Lux/Pulsar config &#39;</span>\n                               <span class=\"s\">&#39; file, where settings can be specified.&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">opt</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_option_list</span><span class=\"p\">:</span>\n            <span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">opt</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">option_list</span><span class=\"p\">:</span>\n            <span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parser</span>\n\n</div>\n<span class=\"k\">class</span> <span class=\"nc\">LuxApp</span><span class=\"p\">(</span><span class=\"n\">Application</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&#39;lux&#39;</span>\n    <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">include</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s\">&#39;loglevel&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;loghandlers&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;debug&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;config&#39;</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"p\">):</span>\n        <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">_loop</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n\n<div class=\"viewcode-block\" id=\"Command\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.commands.Command\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Command</span><span class=\"p\">(</span><span class=\"n\">ConsoleParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Signature class for lux commands. A :class:`.Command` is never</span>\n<span class=\"sd\">    created directly, instead, the :meth:`.App.get_command` method is used.</span>\n\n<span class=\"sd\">    A command is executed via its callable method.</span>\n\n<span class=\"sd\">    .. attribute:: name</span>\n\n<span class=\"sd\">        Command name, given by the module name containing the Command.</span>\n\n<span class=\"sd\">    .. attribute:: app</span>\n\n<span class=\"sd\">        The :class:`.App` running this :class:`.Command`.</span>\n\n<span class=\"sd\">    .. attribute:: stdout</span>\n\n<span class=\"sd\">        The file object corresponding to the output streams of this command.</span>\n\n<span class=\"sd\">        Default: ``sys.stdout``</span>\n\n<span class=\"sd\">    .. attribute:: stderr</span>\n\n<span class=\"sd\">        The file object corresponding to the error streams of this command.</span>\n\n<span class=\"sd\">        Default: ``sys.stderr``</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">stdout</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">stderr</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pulsar_app</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n        <span class=\"n\">app</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Command.get_version\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.commands.Command.get_version\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the :class:`.Command` version.</span>\n\n<span class=\"sd\">        By default it is the same version as lux.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">__version__</span>\n</div>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_module</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config_module</span>\n\n<div class=\"viewcode-block\" id=\"Command.run\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.commands.Command.run\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Run this :class:`Command`.</span>\n\n<span class=\"sd\">        This is the only method which needs implementing by subclasses.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n</div>\n<div class=\"viewcode-block\" id=\"Command.run_until_complete\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.commands.Command.run_until_complete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run_until_complete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Execute the :meth:`run` method using pulsar asynchronous engine.</span>\n\n<span class=\"sd\">        Most commands are run using this method.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">maybe_async</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">),</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">Future</span><span class=\"p\">):</span>\n            <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">is_running</span><span class=\"p\">(),</span> <span class=\"s\">&#39;Loop already running&#39;</span>\n            <span class=\"k\">return</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n</div>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s\">&#39;lux.</span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Command.write\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.commands.Command.write\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Write ``stream`` to the :attr:`stdout`.&#39;&#39;&#39;</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"ow\">or</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span>\n        <span class=\"k\">if</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n            <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">native_str</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">))</span>\n        <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"Command.write_err\"><a class=\"viewcode-back\" href=\"../../../api/core#lux.core.commands.Command.write_err\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write_err</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Write ``stream`` to the :attr:`stderr`.&#39;&#39;&#39;</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"ow\">or</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span>\n        <span class=\"k\">if</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n            <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">native_str</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">))</span>\n        <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"p\">)</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">pulsar_app</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">log_name</span><span class=\"o\">=</span><span class=\"s\">&#39;lux&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span>\n        <span class=\"k\">if</span> <span class=\"n\">application</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">LuxApp</span>\n        <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">setting</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">option_list</span><span class=\"p\">:</span>\n            <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setting</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">application</span><span class=\"p\">(</span><span class=\"nb\">callable</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">callable</span><span class=\"p\">,</span>\n                           <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help</span><span class=\"p\">,</span>\n                           <span class=\"n\">epilog</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;EPILOG&#39;</span><span class=\"p\">),</span>\n                           <span class=\"n\">cfg</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"p\">,</span>\n                           <span class=\"n\">argv</span><span class=\"o\">=</span><span class=\"n\">argv</span><span class=\"p\">,</span>\n                           <span class=\"n\">log_name</span><span class=\"o\">=</span><span class=\"n\">log_name</span><span class=\"p\">,</span>\n                           <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">,</span>\n                           <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">,</span>\n                           <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config_module</span><span class=\"p\">,</span>\n                           <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span></div>\n</pre></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class='small hidden-print text-muted' id='page-footer'>\n    <div class='container'>\n        <div class='row'>\n            <div class='block col-sm-5'>\n                <div class='hidden-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n                <div class='text-center visible-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n            </div>\n            <div class='block col-sm-2 text-center'>\n                <div class='hidden-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n                <div class='visible-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n            </div>\n            <div class='block col-sm-5'>\n                <div class='text-right hidden-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n                <div class='text-center visible-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"}, "html_url": "http://quantmind.github.io/lux/docs/modules/lux/core/commands", "slug": "modules/lux/core/commands", "site": {"url": "http://quantmind.github.io/lux", "template": "doc.html", "date": "2014-10-14T09-01-57", "python_version": "3.4.1", "name": "Lux", "template_engine": null, "media": "/media", "lux_version": "0.1.0-alpha.1", "year": 2014}, "modified": "2014-10-14T09:02:02", "content_type": "text/html", "head": {}, "api_url": "http://quantmind.github.io/lux/jsonapi/docs/modules/lux/core/commands"}