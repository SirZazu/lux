{"modified": "2014-10-22T12:24:44", "api_url": "http://quantmind.github.io/lux/jsonapi/docs/modules/lux/extensions/ui/lib/base", "site": {"date": "2014-10-22T12-24-38", "python_version": "3.4.1", "template_engine": null, "year": 2014, "url": "http://quantmind.github.io/lux", "media": "/media", "name": "Lux", "lux_version": "0.1.1-alpha.1", "template": "doc.html"}, "head": {}, "html_url": "http://quantmind.github.io/lux/docs/modules/lux/extensions/ui/lib/base", "slug": "modules/lux/extensions/ui/lib/base", "content_type": "text/html", "html": {"main": "<section id=\"page-header\" class=\"page-header-outer modules_lux_extensions_ui_lib_base-header\">\n    <div class=\"layer\">\n        <div class=\"page-header\">\n            <div class=\"container fullpage\">\n                <div class=\"row fullpage\">\n                    <div class=\"col-sm-12 text-center\">\n                        <breadcrumbs></breadcrumbs>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n<div id=\"page-main\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"modules_lux_extensions_ui_lib_base-main col-md-12\">\n                <div class=\"center-block\" style=\"max-width: 900px\" data-highlight data-hash-scroll>\n                    <h1>Source code for lux.extensions.ui.lib.base</h1><div class=\"highlight\"><pre>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">copy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Mapping</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar</span> <span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.structures</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"n\">mapping_iterator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.utils.pep</span> <span class=\"kn\">import</span> <span class=\"n\">itervalues</span><span class=\"p\">,</span> <span class=\"n\">iteritems</span><span class=\"p\">,</span> <span class=\"n\">ispy3k</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.apps.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pulsar.apps</span> <span class=\"kn\">import</span> <span class=\"n\">wsgi</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;Css&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;Variable&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;Symbol&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;Mixin&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;px&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;em&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;pc&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;size&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;as_value&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;Lazy&#39;</span><span class=\"p\">,</span>\n           <span class=\"s\">&#39;spacing&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;Variables&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;as_params&#39;</span><span class=\"p\">]</span>\n\n<span class=\"n\">nan</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">&#39;nan&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">smart_round</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">ndigits</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">ndigits</span><span class=\"p\">)</span>\n    <span class=\"n\">ivalue</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ivalue</span> <span class=\"k\">if</span> <span class=\"n\">ivalue</span> <span class=\"o\">==</span> <span class=\"n\">value</span> <span class=\"k\">else</span> <span class=\"n\">value</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">clamp</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">maxval</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">maxval</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">alltags</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Generator of all tags from a string.&#39;&#39;&#39;</span>\n    <span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">&#39;,&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"c\"># Remove front white spaces and keep count of how many</span>\n        <span class=\"k\">while</span> <span class=\"n\">tag</span> <span class=\"ow\">and</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"k\">if</span> <span class=\"n\">tag</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"s\">&#39; </span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">tag</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">tag</span>\n            <span class=\"k\">elif</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">&#39;:&#39;</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">tag</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">yield</span> <span class=\"s\">&#39; </span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">tag</span>\n\n\n<div class=\"viewcode-block\" id=\"as_value\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.as_value\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">as_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Internal function used to convert any ``value`` into a suitable</span>\n<span class=\"sd\">    string to include into the css rules.&#39;&#39;&#39;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s\">&#39;value&#39;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n</div>\n<div class=\"viewcode-block\" id=\"as_params\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.as_params\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">as_params</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">default_name</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Convert ``value`` into a dictionary.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Variables</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n    <span class=\"k\">elif</span> <span class=\"n\">default_name</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">default_name</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;&quot;</span><span class=\"si\">%s</span><span class=\"s\">&quot; is not a mapping&#39;</span> <span class=\"o\">%</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n</div>\n<span class=\"n\">addition</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n<span class=\"n\">subtraction</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">b</span>\n<span class=\"n\">multiplication</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span>\n<span class=\"n\">division</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">b</span>\n<span class=\"n\">floordivision</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">//</span><span class=\"n\">b</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Symbolic</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Base class for :class:`Variable` and :class:`Unit`.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__repr__</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">addition</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__sub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">subtraction</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__rsub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">addition</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__rsub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">subtraction</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__mul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sp</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">multiplication</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__floordiv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sp</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">floordivision</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__rmul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__mul__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ispy3k</span><span class=\"p\">:</span>  <span class=\"c\"># pragma: no cover</span>\n        <span class=\"k\">def</span> <span class=\"nf\">__truediv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sp</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>   <span class=\"c\"># pragma: no cover</span>\n        <span class=\"k\">def</span> <span class=\"nf\">__div__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sp</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_sp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n\n<div class=\"viewcode-block\" id=\"Variable\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variable\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Variable</span><span class=\"p\">(</span><span class=\"n\">Symbolic</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Base class for :class:`Variable` which can be stored in</span>\n<span class=\"sd\">    a :class:`Variables` container.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n<div class=\"viewcode-block\" id=\"Variable.value\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variable.value\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;The current value of this :class:`Variable`.&#39;&#39;&#39;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"s\">&#39;&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tojson</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">LazyOp</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">right</span> <span class=\"k\">else</span> <span class=\"n\">LazyOp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_sp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">LazyOp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">)</span>\n\n</div>\n<div class=\"viewcode-block\" id=\"Symbol\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Symbol\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Symbol</span><span class=\"p\">(</span><span class=\"n\">Variable</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A :class:`Variable` with a :attr:`name` and an underlying value which</span>\n<span class=\"sd\">    can be another :class:`Variable`.</span>\n\n<span class=\"sd\">    .. attribute:: value</span>\n\n<span class=\"sd\">        The value of this variable. It can be another Variable</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n<div class=\"viewcode-block\" id=\"Symbol.value\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Symbol.value\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;value() takes zero or one argument (</span><span class=\"si\">%s</span><span class=\"s\"> given)&#39;</span>\n                                <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span>\n\n</div></div>\n<div class=\"viewcode-block\" id=\"Lazy\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Lazy\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Lazy</span><span class=\"p\">(</span><span class=\"n\">Variable</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A lazy :class:`Variable`.</span>\n\n<span class=\"sd\">    :param callable: the callable invoked when accessing the</span>\n<span class=\"sd\">    :meth:`Variable.value` method of this lazy variable.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">callable</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"nb\">callable</span><span class=\"p\">,</span> <span class=\"s\">&#39;__call__&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;First argument must be a callable&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callable</span> <span class=\"o\">=</span> <span class=\"nb\">callable</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n</div>\n<span class=\"k\">class</span> <span class=\"nc\">LazyOp</span><span class=\"p\">(</span><span class=\"n\">Variable</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A :class:`Variable` representing a lazy operation.&#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_calculate</span> <span class=\"o\">=</span> <span class=\"n\">op</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_calculate</span><span class=\"p\">(</span><span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v1</span><span class=\"p\">),</span> <span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Unit</span><span class=\"p\">(</span><span class=\"n\">Symbolic</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Base class for :class:`Size` and :class:`Spacing`.&#39;&#39;&#39;</span>\n    <span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Size</span><span class=\"p\">(</span><span class=\"n\">Unit</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Don&#39;t Initialise directly. Use the :func:`size` function instead.&#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s\">&#39;auto&#39;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">unit</span> <span class=\"ow\">or</span> <span class=\"s\">&#39;px&#39;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"n\">smart_round</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">==</span> <span class=\"s\">&#39;px&#39;</span> <span class=\"k\">else</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#39;</span><span class=\"si\">%s%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">top</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bottom</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">left</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">right</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">(</span>\n                <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">right</span> <span class=\"k\">else</span> <span class=\"n\">op</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;Cannot perform operation between </span><span class=\"si\">%s</span><span class=\"s\"> and </span><span class=\"si\">%s</span><span class=\"s\">.&#39;</span>\n                            <span class=\"s\">&#39; Different units.&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_sp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;Cannot perform operation between </span><span class=\"si\">%s</span><span class=\"s\"> and </span><span class=\"si\">%s</span><span class=\"s\">.&#39;</span>\n                            <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Spacing</span><span class=\"p\">(</span><span class=\"n\">Unit</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Css spacing with same unit. It can be used to specify padding,</span>\n<span class=\"sd\">    margin or any other css parameters which requires spacing box of</span>\n<span class=\"sd\">    the form (top, right, bottom, left).&#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">top_right_bottom_left</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">top_right_bottom_left</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;Spacing() takes at least 1 argument (0 given)&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">top_right_bottom_left</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;Spacing() takes at most 4 argument (</span><span class=\"si\">%d</span><span class=\"s\"> given)&#39;</span>\n                            <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">top_right_bottom_left</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"n\">top_right_bottom_left</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">top</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unit</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">!=</span> <span class=\"n\">unit</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">nan</span>\n        <span class=\"k\">return</span> <span class=\"n\">unit</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">top</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">right</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">top</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bottom</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">top</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">left</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">spacing</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">_value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__sub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_op</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__mul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"o\">*</span><span class=\"n\">other</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_div</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"o\">/</span><span class=\"n\">other</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__floordiv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"o\">//</span><span class=\"n\">other</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">spacing</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">right</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_sp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;Cannot perform operation between </span><span class=\"si\">%s</span><span class=\"s\"> and </span><span class=\"si\">%s</span><span class=\"s\">.&#39;</span>\n                            <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">))</span>\n\n\n<span class=\"c\">############################################################################</span>\n<span class=\"c\">##    factory functions</span>\n<span class=\"n\">px</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s\">&#39;px&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s\">&#39;%&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">em</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s\">&#39;em&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">Size</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n    <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"s\">&#39;auto&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"s\">&#39;auto&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s\">&#39;px&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s\">&#39;em&#39;</span><span class=\"p\">):</span>\n                        <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s\">&#39;%&#39;</span><span class=\"p\">):</span>\n                        <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;&quot;</span><span class=\"si\">%s</span><span class=\"s\">&quot; not a valid size&#39;</span> <span class=\"o\">%</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n            <span class=\"n\">ivalue</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">ivalue</span> <span class=\"k\">if</span> <span class=\"n\">ivalue</span> <span class=\"o\">==</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">v</span>\n            <span class=\"k\">return</span> <span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n\n<div class=\"viewcode-block\" id=\"spacing\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.spacing\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">spacing</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">vals</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Create a :class:`Spacing` element.&#39;&#39;&#39;</span>\n    <span class=\"k\">return</span> <span class=\"n\">v</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">Spacing</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">vals</span> <span class=\"k\">else</span> <span class=\"n\">Spacing</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n\n</div>\n<span class=\"k\">class</span> <span class=\"nc\">CssBase</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">_spacings</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">&#39;top&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;right&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;bottom&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;left&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\">-</span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"o\">.</span><span class=\"n\">__name__</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">code</span>\n    <span class=\"n\">__str__</span> <span class=\"o\">=</span> <span class=\"n\">__repr__</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n\n<div class=\"viewcode-block\" id=\"Mixin\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Mixin\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Mixin</span><span class=\"p\">(</span><span class=\"n\">CssBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A css *Mixin* is a generator of :class:`css` and other</span>\n<span class=\"sd\">    :class:`Mixin` elements. All :class:`Mixin` must implement the</span>\n<span class=\"sd\">    callable method which receives the :class:`css` element which</span>\n<span class=\"sd\">    contains them.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">elem</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">elem</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">rendered</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n\n<span class=\"c\">################################################# Media</span></div>\n<span class=\"k\">class</span> <span class=\"nc\">Media</span><span class=\"p\">(</span><span class=\"n\">Mixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Add @media queries to css.&#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">Css</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">css</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">attributes</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Add a `css`` rule for tag.</span>\n\n<span class=\"sd\">        Return ``self`` for chaining more rules</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">attributes</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">elem</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">variables</span>\n        <span class=\"n\">media</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">:</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s\">&#39; and &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"s\">&#39;(</span><span class=\"si\">%s</span><span class=\"s\">:</span><span class=\"si\">%s</span><span class=\"s\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&#39;_&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;-&#39;</span><span class=\"p\">),</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n                                  <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">)))</span>\n            <span class=\"n\">media</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\"> and </span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">media</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n        <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"s\">&#39;@media </span><span class=\"si\">%s</span><span class=\"s\"> {&#39;</span> <span class=\"o\">%</span> <span class=\"n\">media</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s\">&#39;    &#39;</span><span class=\"p\">),</span>\n                           <span class=\"s\">&#39;}&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">add_stream</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Css\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Css</span><span class=\"p\">(</span><span class=\"n\">CssBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A :class:`css` element in python.</span>\n\n<span class=\"sd\">    .. attribute:: attributes</span>\n\n<span class=\"sd\">        List of css attributes for the css element.</span>\n\n<span class=\"sd\">    .. attribute:: children</span>\n\n<span class=\"sd\">        An ordered dictionary of children for this :class:`css` element.</span>\n<span class=\"sd\">        Children are either other :class:`css` elements or :class:`Mixin`.</span>\n\n<span class=\"sd\">    .. attribute:: parent</span>\n\n<span class=\"sd\">        The :class:`css` ancestor for this :class:`css` element.</span>\n\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">rendered</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n    <span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">_css_libs</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tag</span> <span class=\"o\">=</span> <span class=\"n\">tag</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">tag</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">&#39;app should be passed to the root element only&#39;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tag</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_css_libs</span> <span class=\"o\">=</span> <span class=\"n\">wsgi</span><span class=\"o\">.</span><span class=\"n\">Links</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s\">&#39;MEDIA_URL&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;/media/&#39;</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"n\">Variables</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">vars</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"nb\">vars</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"n\">Variables</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">hover</span> <span class=\"o\">=</span> <span class=\"s\">&#39;hover&#39;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">active</span> <span class=\"o\">=</span> <span class=\"s\">&#39;active&#39;</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">tag</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s\">&#39;A tag must be defined&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_parent</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_children</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">children</span><span class=\"p\">])</span>\n                                   <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">children</span> <span class=\"ow\">in</span>\n                                   <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_attributes</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attributes</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span>\n\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Css.tag\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.tag\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">tag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;The tag for this :class:`Css` element.</span>\n\n<span class=\"sd\">        Always defined unless this is the root instance.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tag</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span><span class=\"p\">:</span>\n            <span class=\"n\">ptag</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span><span class=\"o\">.</span><span class=\"n\">tag</span>\n            <span class=\"k\">if</span> <span class=\"n\">ptag</span><span class=\"p\">:</span>\n                <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"si\">%s%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ptag</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">tag</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"k\">if</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">tag</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Css.code\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.code\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;The code for this css tag.&#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tag</span> <span class=\"ow\">or</span> <span class=\"s\">&#39;ROOT&#39;</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Css.attributes\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.attributes\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">attributes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Css attributes for this element.&#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attributes</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Css.children\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.children\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;:class:`Css` children of this element.&#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Css.parent\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.parent\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span>\n</div>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">root</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span><span class=\"o\">.</span><span class=\"n\">root</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">app</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">_app</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">http</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span><span class=\"o\">.</span><span class=\"n\">http</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http</span> <span class=\"o\">=</span> <span class=\"n\">HttpClient</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Variables</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Mixin</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">&#39;Cannot assign a Mixin to {0}. Use add instead.&#39;</span>\n                            <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&#39;_&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;-&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attributes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s\">&#39;cannot get item&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n\n<div class=\"viewcode-block\" id=\"Css.css\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.css\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">css</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">attributes</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;A child :class:`Css` elements.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">tag</span><span class=\"p\">:</span>\n            <span class=\"n\">elems</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Css</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">alltags</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">elems</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Css</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)]</span>\n        <span class=\"k\">for</span> <span class=\"n\">clone</span><span class=\"p\">,</span> <span class=\"n\">css</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">elems</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">attributes</span><span class=\"p\">):</span>\n                <span class=\"n\">css</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"n\">css</span><span class=\"o\">.</span><span class=\"n\">set_parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"c\"># Loop over components to add them to self</span>\n            <span class=\"k\">for</span> <span class=\"n\">cl</span> <span class=\"ow\">in</span> <span class=\"n\">components</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cl</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                    <span class=\"n\">cl</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">cl</span><span class=\"p\">,)</span>\n                <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">cl</span><span class=\"p\">:</span>\n                    <span class=\"n\">css</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">clone</span> <span class=\"k\">else</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">elems</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">elems</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">elems</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">media</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">query</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">media</span> <span class=\"o\">=</span> <span class=\"n\">Media</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"k\">else</span> <span class=\"s\">&#39;all&#39;</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">media</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">media</span>\n\n<div class=\"viewcode-block\" id=\"Css.get_media_url\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.get_media_url\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_media_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Build the url for a media path.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">libs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">_css_libs</span>\n        <span class=\"k\">if</span> <span class=\"n\">libs</span><span class=\"p\">:</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">libs</span><span class=\"o\">.</span><span class=\"n\">absolute_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">&#39;http&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">&#39;http:</span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">path</span>\n            <span class=\"k\">return</span> <span class=\"n\">path</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s\">&#39;No css libs configured&#39;</span><span class=\"p\">)</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">iterable</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">mapping_iterator</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n<div class=\"viewcode-block\" id=\"Css.add\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.add\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Add a child :class:`css` or a class:`Mixin`.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">CssBase</span><span class=\"p\">):</span>\n            <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">set_parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">add_child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">):</span>\n        <span class=\"n\">clist</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">clist</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">child</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">clist</span><span class=\"p\">:</span>\n            <span class=\"n\">clist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"p\">[</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">child</span><span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"Css.add_stream\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.add_stream\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_stream</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Add css text to the element.&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"p\">[</span><span class=\"n\">stream</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">stream</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">set_parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">):</span>\n        <span class=\"c\"># Get the element if available</span>\n        <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s\">&#39;tag&#39;</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">parent</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s\">&#39;Body cannot have parent&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n        <span class=\"k\">assert</span> <span class=\"n\">parent</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s\">&#39;cannot set self as parent&#39;</span>\n        <span class=\"c\"># When switching parents, remove itself from current parent children</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">parent</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parent</span><span class=\"o\">.</span><span class=\"n\">add_child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Css.destroy\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.destroy\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">destroy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Safely this :class:`css` from the body tree.&#39;&#39;&#39;</span>\n        <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n        <span class=\"k\">if</span> <span class=\"n\">parent</span><span class=\"p\">:</span>\n            <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"Css.remove\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.remove\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Safely remove *child* form this :class:`css` element.&#39;&#39;&#39;</span>\n        <span class=\"n\">clist</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">clist</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">clist</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">clist</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"Css.extend\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.extend\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">elem</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Extend by adding *elem* attributes and children.&#39;&#39;&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attributes</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">_attributes</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">child_list</span> <span class=\"ow\">in</span> <span class=\"n\">itervalues</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">child_list</span><span class=\"p\">:</span>\n                <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">set_parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"Css.stream\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.stream\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">stream</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">whitespace</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;This function convert the :class:`css` element into a string.&#39;&#39;&#39;</span>\n        <span class=\"c\"># First we execute mixins</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rendered</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\"> already rendered&#39;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rendered</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n        <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">clist</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">children</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">clist</span><span class=\"p\">:</span>\n                <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_parent</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n                <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">set_parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">:</span>   <span class=\"c\"># the child (mixin) has return a string, added it.</span>\n                    <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attributes</span><span class=\"p\">:</span>\n            <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\">    </span><span class=\"si\">%s</span><span class=\"s\">: </span><span class=\"si\">%s</span><span class=\"s\">;&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">whitespace</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n        <span class=\"c\"># Mixins and children</span>\n        <span class=\"k\">for</span> <span class=\"n\">child_list</span> <span class=\"ow\">in</span> <span class=\"n\">itervalues</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">child_list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">child_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">child_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n                    <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"p\">(</span><span class=\"n\">whitespace</span><span class=\"p\">):</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">s</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">yield</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">child_list</span>\n</div>\n<div class=\"viewcode-block\" id=\"Css.render\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Css.render\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">whitespace</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Render the :class:`css` component and all its children&#39;&#39;&#39;</span>\n        <span class=\"n\">od</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"p\">(</span><span class=\"n\">whitespace</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">od</span><span class=\"p\">:</span>\n                <span class=\"n\">od</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">tag</span><span class=\"p\">:</span>\n                <span class=\"n\">od</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">tags</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">od</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">tags</span><span class=\"p\">:</span>\n                    <span class=\"k\">yield</span> <span class=\"s\">&#39;,</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"s\">&#39;</span><span class=\"si\">%s%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">whitespace</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">tags</span><span class=\"p\">)</span>\n                                     <span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">&#39; {&#39;</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">data</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">whitespace</span> <span class=\"o\">+</span> <span class=\"s\">&#39;}</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">data</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">())</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">render_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">media_url</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"s\">&#39;utf-8&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">root</span>\n        <span class=\"k\">if</span> <span class=\"n\">media_url</span><span class=\"p\">:</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">MEDIAURL</span> <span class=\"o\">=</span> <span class=\"n\">media_url</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">()</span>\n        <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromtimestamp</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">))</span>\n        <span class=\"n\">nice_dt</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">intro</span> <span class=\"o\">=</span> <span class=\"s\">&#39;&#39;&#39;@charset &quot;UTF-8&quot;;</span>\n<span class=\"s\">/*</span>\n<span class=\"s\">------------------------------------------------------------------</span>\n<span class=\"s\">Created by lux in {1} seconds</span>\n<span class=\"s\">Date: {0}</span>\n\n<span class=\"s\">http://quantmind.github.io/lux/</span>\n<span class=\"s\">------------------------------------------------------------------ */</span>\n\n<span class=\"s\">&#39;&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">created</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">),</span> <span class=\"n\">nice_dt</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">intro</span> <span class=\"o\">+</span> <span class=\"n\">body</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dump</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">dump_variables</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">root</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">app</span>\n        <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"p\">:</span>\n            <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n            <span class=\"c\"># Import applications styles if available</span>\n            <span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">&#39;EXCLUDE_EXTENSIONS_CSS&#39;</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">extension</span> <span class=\"ow\">in</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">&#39;EXTENSIONS&#39;</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"n\">extension</span> <span class=\"ow\">in</span> <span class=\"n\">exclude</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"s\">&#39;add_css&#39;</span><span class=\"p\">):</span>\n                        <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">add_css</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n                        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&#39;Imported style from &quot;</span><span class=\"si\">%s</span><span class=\"s\">&quot;.&#39;</span> <span class=\"o\">%</span> <span class=\"n\">extension</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">write_err</span><span class=\"p\">(</span><span class=\"s\">&#39;Cannot import style </span><span class=\"si\">%s</span><span class=\"s\">: &quot;</span><span class=\"si\">%s</span><span class=\"s\">&quot;.&#39;</span> <span class=\"o\">%</span>\n                                   <span class=\"p\">(</span><span class=\"n\">extension</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">dump_variables</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">tojson</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">render_all</span><span class=\"p\">()</span>\n\n</div>\n<div class=\"viewcode-block\" id=\"Variables\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variables\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Variables</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;A container of :class:`Variable` with name-spaces::</span>\n\n<span class=\"sd\">        v = Variables()</span>\n<span class=\"sd\">        v.body.height = px(16)</span>\n\n<span class=\"sd\">    If the body name-space is not available is automatically created.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">reserved</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">&#39;_reserved&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;reserved&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;parent&#39;</span><span class=\"p\">,</span>\n                <span class=\"s\">&#39;current_theme&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">MEDIAURL</span> <span class=\"o\">=</span> <span class=\"s\">&#39;/media/&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__dict__</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s\">&#39;_reserved&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n                                            <span class=\"s\">&#39;parent&#39;</span><span class=\"p\">:</span> <span class=\"n\">parent</span><span class=\"p\">},</span>\n                              <span class=\"s\">&#39;_data&#39;</span><span class=\"p\">:</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">)</span>\n    <span class=\"n\">__str__</span> <span class=\"o\">=</span> <span class=\"n\">__repr__</span>\n\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Variables.name\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variables.name\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;The name of this container of :class:`Variable`.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#39;root&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reserved</span><span class=\"p\">[</span><span class=\"s\">&#39;name&#39;</span><span class=\"p\">]</span>\n</div>\n    <span class=\"nd\">@property</span>\n<div class=\"viewcode-block\" id=\"Variables.parent\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variables.parent\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;The parent :class:`Variables` container.&#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reserved</span><span class=\"p\">[</span><span class=\"s\">&#39;parent&#39;</span><span class=\"p\">]</span>\n</div>\n<div class=\"viewcode-block\" id=\"Variables.value\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variables.value\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Provide the value method which returns ``None``.&#39;&#39;&#39;</span>\n        <span class=\"k\">pass</span>\n</div>\n<div class=\"viewcode-block\" id=\"Variables.valid\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variables.valid\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;``True`` if the :class:`Variables` are part of a root dictionary.&#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s\">&#39;root&#39;</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n</div>\n<div class=\"viewcode-block\" id=\"Variables.copy\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variables.copy\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Copy the :class:`Variables` in a recursive way.&#39;&#39;&#39;</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">:</span>\n            <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">v</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__contains__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tojson</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(((</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">tojson</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">))</span>\n\n<div class=\"viewcode-block\" id=\"Variables.params\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.base.Variables.params\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Return this :class:`Variables` container as a dictionary</span>\n<span class=\"sd\">of named variables.&#39;&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span><span class=\"p\">(</span><span class=\"n\">recursive</span><span class=\"p\">)</span>\n                     <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">))</span>\n</div>\n    <span class=\"k\">def</span> <span class=\"nf\">_stream</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reserved</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">prefix</span><span class=\"p\">:</span>\n                    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"si\">%s%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Variables</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">recursive</span><span class=\"p\">:</span>\n                    <span class=\"n\">pfix</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\">_&#39;</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n                    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">_stream</span><span class=\"p\">(</span><span class=\"n\">recursive</span><span class=\"p\">,</span> <span class=\"n\">pfix</span><span class=\"p\">):</span>\n                        <span class=\"k\">yield</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reserved</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">):</span>\n                <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Variables</span><span class=\"p\">):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n                        <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s\">&#39;Cannot set attribute </span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Variables</span><span class=\"p\">):</span>\n                <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n                <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_reserved</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s\">&#39;parent&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">})</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">:</span>\n                <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span></div>\n</pre></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class='small hidden-print text-muted' id='page-footer'>\n    <div class='container'>\n        <div class='row'>\n            <div class='block col-sm-5'>\n                <div class='hidden-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n                <div class='text-center visible-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.1</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n            </div>\n            <div class='block col-sm-2 text-center'>\n                <div class='hidden-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n                <div class='visible-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n            </div>\n            <div class='block col-sm-5'>\n                <div class='text-right hidden-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n                <div class='text-center visible-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"}, "name": "modules_lux_extensions_ui_lib_base"}