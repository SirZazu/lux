{"name": "modules_lux_extensions_ui_lib_colorvar", "api_url": "http://quantmind.github.io/lux/jsonapi/docs/modules/lux/extensions/ui/lib/colorvar", "content_type": "text/html", "modified": "2014-11-11T21:51:46", "head": {}, "html": {"main": "<section id=\"page-header\" class=\"page-header-outer modules_lux_extensions_ui_lib_colorvar-header\">\n    <div class=\"layer\">\n        <div class=\"page-header\">\n            <div class=\"container fullpage\">\n                <div class=\"row fullpage\">\n                    <div class=\"col-sm-12 text-center\">\n                        <breadcrumbs></breadcrumbs>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n<div id=\"page-main\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"modules_lux_extensions_ui_lib_colorvar-main col-md-12\">\n                <div class=\"center-block\" style=\"max-width: 900px\" data-highlight data-hash-scroll>\n                    <h1>Source code for lux.extensions.ui.lib.colorvar</h1><div class=\"highlight\"><pre>\n<span class=\"kn\">import</span> <span class=\"nn\">colorsys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.base</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"n\">as_value</span><span class=\"p\">,</span> <span class=\"n\">ispy3k</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">,</span> <span class=\"n\">clamp</span><span class=\"p\">,</span> <span class=\"n\">Lazy</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ispy3k</span><span class=\"p\">:</span>  <span class=\"c\"># pragma: no cover</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">izip</span>\n    <span class=\"nb\">zip</span> <span class=\"o\">=</span> <span class=\"n\">izip</span>\n\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;RGBA&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;color&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;safe_color&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;lighten&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;darken&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;mix_colors&#39;</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">clamprgb</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"mi\">255</span><span class=\"p\">))</span>\n\n<span class=\"n\">hex2</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"s\">&#39;0&#39;</span><span class=\"o\">+</span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">:]</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"mi\">16</span> <span class=\"k\">else</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n\n<span class=\"n\">HSLA</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s\">&#39;HSLA&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h s l alpha&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">HSVA</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s\">&#39;HSVA&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;h s v alpha&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">string_colors</span> <span class=\"o\">=</span> <span class=\"nb\">frozenset</span><span class=\"p\">((</span><span class=\"s\">&#39;transparent&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;inherit&#39;</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ColorError</span><span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<div class=\"viewcode-block\" id=\"RGBA\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.colorvar.RGBA\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">RGBA</span><span class=\"p\">(</span><span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s\">&#39;RGBA&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;red green blue alpha&#39;</span><span class=\"p\">),</span> <span class=\"n\">Unit</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;CSS3 red-green-blue &amp; alpha color definition. It contains conversions</span>\n<span class=\"sd\">to and from HSL_ and HSV representations.</span>\n\n<span class=\"sd\">.. attribute:: red</span>\n\n<span class=\"sd\">    red light (0 to 255)</span>\n\n<span class=\"sd\">.. attribute:: green</span>\n\n<span class=\"sd\">    green light (0 to 255)</span>\n\n<span class=\"sd\">.. attribute:: blue</span>\n\n<span class=\"sd\">    blue light (0 to 255)</span>\n\n<span class=\"sd\">.. attribute:: alpha</span>\n\n<span class=\"sd\">    opacity level (0 to 1)</span>\n\n<span class=\"sd\">.. _HSL: http://en.wikipedia.org/wiki/HSL_and_HSV</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__new__</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">RGBA</span><span class=\"p\">,</span> <span class=\"n\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__new__</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">clamprgb</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">),</span> <span class=\"n\">clamprgb</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">),</span>\n                                        <span class=\"n\">clamprgb</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;color&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__sub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"o\">-</span><span class=\"n\">v2</span> <span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">r</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Convert to a css string representation.&#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">alpha</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#39;rgba(&#39;</span> <span class=\"o\">+</span> <span class=\"s\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s\">&#39;)&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"n\">hex2</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]))</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:]:</span>\n                <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:]</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#39;#</span><span class=\"si\">%s</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">s</span>\n\n<div class=\"viewcode-block\" id=\"RGBA.tohsla\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.colorvar.RGBA.tohsla\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">tohsla</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Convert to HSL representation (hue, saturation, lightness).</span>\n<span class=\"sd\">Note all values are number between 0 and 1. Therefore for the hue, to obtain</span>\n<span class=\"sd\">the angle value you need to multiply by 360.</span>\n\n<span class=\"sd\">:rtype: a four elements tuple containing hue, saturation, lightness, alpha&#39;&#39;&#39;</span>\n        <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">colorsys</span><span class=\"o\">.</span><span class=\"n\">rgb_to_hls</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"o\">/</span><span class=\"mf\">255.</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"o\">/</span><span class=\"mf\">255.</span><span class=\"p\">,</span>\n                                      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">/</span><span class=\"mf\">255.</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">HSLA</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">alpha</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"RGBA.tohsva\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.colorvar.RGBA.tohsva\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">tohsva</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Convert to HSV representation (hue, saturation, value). This</span>\n<span class=\"sd\">is also called HSB (hue, saturation, brightness).</span>\n<span class=\"sd\">Note all values are number between 0 and 1. Therefore for the hue, to obtain</span>\n<span class=\"sd\">the angle value you need to multiply by 360.</span>\n\n<span class=\"sd\">:rtype: a four elements tuple containing hue, saturation, value, alpha&#39;&#39;&#39;</span>\n        <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">colorsys</span><span class=\"o\">.</span><span class=\"n\">rgb_to_hsv</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"o\">/</span><span class=\"mf\">255.</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"o\">/</span><span class=\"mf\">255.</span><span class=\"p\">,</span>\n                                      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">/</span><span class=\"mf\">255.</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">HSVA</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">alpha</span><span class=\"p\">)</span>\n</div>\n<div class=\"viewcode-block\" id=\"RGBA.darken\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.colorvar.RGBA.darken\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">darken</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Darken the color by a given *weight* in percentage. It return a</span>\n<span class=\"sd\">new :class:`RGBA` color with lightness decreased by that amount.&#39;&#39;&#39;</span>\n        <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tohsla</span><span class=\"p\">()</span>\n        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">-</span> <span class=\"mf\">0.01</span><span class=\"o\">*</span><span class=\"n\">weight</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fromhsl</span><span class=\"p\">((</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n</div>\n<div class=\"viewcode-block\" id=\"RGBA.lighten\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.colorvar.RGBA.lighten\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">lighten</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Lighten the color by a given *weight* in percentage. It return a</span>\n<span class=\"sd\">new :class:`RGBA` color with lightness increased by that amount.&#39;&#39;&#39;</span>\n        <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tohsla</span><span class=\"p\">()</span>\n        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mf\">0.01</span><span class=\"o\">*</span><span class=\"n\">weight</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fromhsl</span><span class=\"p\">((</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n</div>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fromhsl</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">hsla</span><span class=\"p\">):</span>\n        <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">hsla</span>\n        <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">colorsys</span><span class=\"o\">.</span><span class=\"n\">hls_to_rgb</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">cls</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"o\">*</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"o\">*</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mix</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">rgb1</span><span class=\"p\">,</span> <span class=\"n\">rgb2</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">):</span>\n        <span class=\"n\">rgb1</span> <span class=\"o\">=</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"n\">rgb1</span><span class=\"p\">)</span>\n        <span class=\"n\">rgb2</span> <span class=\"o\">=</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"n\">rgb2</span><span class=\"p\">)</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"o\">*</span><span class=\"n\">weight</span><span class=\"p\">)</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">rgb1</span><span class=\"o\">.</span><span class=\"n\">alpha</span> <span class=\"o\">-</span> <span class=\"n\">rgb2</span><span class=\"o\">.</span><span class=\"n\">alpha</span>\n        <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">w</span> <span class=\"k\">if</span> <span class=\"n\">w</span><span class=\"o\">*</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">2.0</span>\n        <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">w1</span>\n        <span class=\"k\">return</span> <span class=\"n\">cls</span><span class=\"p\">(</span><span class=\"n\">w1</span><span class=\"o\">*</span><span class=\"n\">rgb1</span><span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"o\">+</span> <span class=\"n\">w2</span><span class=\"o\">*</span><span class=\"n\">rgb2</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">,</span>\n                   <span class=\"n\">w1</span><span class=\"o\">*</span><span class=\"n\">rgb1</span><span class=\"o\">.</span><span class=\"n\">green</span> <span class=\"o\">+</span> <span class=\"n\">w2</span><span class=\"o\">*</span><span class=\"n\">rgb2</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">,</span>\n                   <span class=\"n\">w1</span><span class=\"o\">*</span><span class=\"n\">rgb1</span><span class=\"o\">.</span><span class=\"n\">blue</span> <span class=\"o\">+</span> <span class=\"n\">w2</span><span class=\"o\">*</span><span class=\"n\">rgb2</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"p\">,</span>\n                   <span class=\"n\">p</span><span class=\"o\">*</span><span class=\"n\">rgb1</span><span class=\"o\">.</span><span class=\"n\">alpha</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">rgb2</span><span class=\"o\">.</span><span class=\"n\">alpha</span><span class=\"p\">)</span>\n\n\n<span class=\"c\">#############################################################################</span>\n<span class=\"c\">##    color factory</span></div>\n<div class=\"viewcode-block\" id=\"color\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.colorvar.color\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">color</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Build a :class:`RGBA` or a :class:`lazy` variable</span>\n<span class=\"sd\">    from several type of inputs.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Lazy</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n    <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;alpha&#39;</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">RGBA</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">cols</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ColorError</span>\n        <span class=\"k\">if</span> <span class=\"n\">alpha</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">col</span>\n    <span class=\"k\">if</span> <span class=\"n\">cols</span><span class=\"p\">:</span>\n        <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"n\">cols</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">col</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">alpha</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"n\">alpha</span>\n            <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">col</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">string_colors</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">col</span>\n        <span class=\"k\">elif</span> <span class=\"n\">col</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">&#39;#&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">col</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n            <span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">((</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)],</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">((</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">col</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ColorError</span><span class=\"p\">(</span><span class=\"s\">&#39;Could not recognize color &quot;</span><span class=\"si\">%s</span><span class=\"s\">&quot;&#39;</span> <span class=\"o\">%</span> <span class=\"n\">col</span><span class=\"p\">)</span>\n    <span class=\"n\">rgb</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">alpha</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"n\">alpha</span><span class=\"p\">,)</span>\n    <span class=\"k\">return</span> <span class=\"n\">RGBA</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">rgb</span><span class=\"p\">)</span>\n\n</div>\n<span class=\"k\">def</span> <span class=\"nf\">safe_color</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">ColorError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n\n<div class=\"viewcode-block\" id=\"darken\"><a class=\"viewcode-back\" href=\"../../../../../api/ui#lux.extensions.ui.lib.colorvar.darken\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">darken</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Darken a color ``col`` by a ``weight``, a number bewteen 0 and 100.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Lazy</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">darken</span><span class=\"p\">(</span><span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">),</span> <span class=\"n\">weight</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">darken</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">)</span>\n\n</div>\n<span class=\"k\">def</span> <span class=\"nf\">lighten</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Lazy</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">lighten</span><span class=\"p\">(</span><span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">),</span> <span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">)))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">color</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lighten</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mix_colors</span><span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">)</span> <span class=\"ow\">or</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">)):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Lazy</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">mix_colors</span><span class=\"p\">(</span><span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">),</span> <span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"n\">col2</span><span class=\"p\">),</span>\n                                       <span class=\"n\">as_value</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"p\">)))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">RGBA</span><span class=\"o\">.</span><span class=\"n\">mix</span><span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">)</span>\n</pre></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class='small hidden-print text-muted' id='page-footer'>\n    <div class='container'>\n        <div class='row'>\n            <div class='block col-sm-5'>\n                <div class='hidden-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.2</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n                <div class='text-center visible-xs'>\n                    <ul class=\"fa-ul text-left\">\n    <li><i class=\"fa-li fa fa-copyright\"></i>2014 <a href=\"http://quantmind.com\">Quantmind</a></li>\n    <li>Site build with Lux on python 3.4.2</li>\n    <li>Docs build with <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/changelog\">Changelog</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/api/\">API</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/docs/EXTENSIONS/\">Extensions</a></li>\n    <li><a href=\"http://quantmind.github.io/lux/images\">Images</a></li>\n</ul>\n                </div>\n            </div>\n            <div class='block col-sm-2 text-center'>\n                <div class='hidden-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n                <div class='visible-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n            </div>\n            <div class='block col-sm-5'>\n                <div class='text-right hidden-xs'>\n                    <p><a href='https://twitter.com/quantmind' title='Follow quantmind on twitter'>\n<i class='fa fa-twitter fa-2x'></i></a>\n<a href='https://plus.google.com/+QuantmindPlus' title='Follow quantmind on google+'>\n<i class='fa fa-google-plus-square fa-2x'></i></a>\n<a href='https://www.facebook.com/quantmind' title='Follow quantmind on facebook'>\n<i class='fa fa-facebook-square fa-2x'></i></a>\n<a href='https://github.com/quantmind/lux' title='Lux on github'>\n<i class='fa fa-github fa-2x'></i></a></p>\n                </div>\n                <div class='text-center visible-xs'>\n                    <p><a href='#top' title=\"Lux\" class=\"hover-opacity\">\n    <img height=50 title='Lux' src='http://quantmind.github.io/lux/media/luxsite/lux.png' alt='Lux'>\n</a></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"}, "site": {"name": "Lux", "template_engine": null, "media": "/media", "date": "2014-11-11T21-51-41", "template": "doc.html", "python_version": "3.4.2", "year": 2014, "url": "http://quantmind.github.io/lux", "lux_version": "0.1.1-alpha.1"}, "html_url": "http://quantmind.github.io/lux/docs/modules/lux/extensions/ui/lib/colorvar", "slug": "modules/lux/extensions/ui/lib/colorvar"}